#include "NRF24L01.h"



#define	RX_DR			0x40
#define	TX_DS			0x20
#define	MAX_RT			0x10

uint8_t TX_ADDRESS[TX_ADR_WIDTH] = {0xff,0xb2,0xb3,0xb4,0x01};  // 定义一个静态发送地址
uint8_t RX_ADDRESS[RX_ADR_WIDTH] = {0xb2,0xb2,0xb3,0xb4,0x01};  // 定义一个静态发送地址
uint8_t RX_BUF[TX_PLOAD_WIDTH];

/*配置MISO and MOSI SCLK 为复用功能（推挽）输出  SPI1  */
/*配置SPI NRF24L01+片选	GPIOB_PIN_15        CSN		通用推挽输出模式 */
/*配置SPI NRF24L01+模式选择	GPIOB_PIN_14    CE		通用推挽输出模式*/
/*配置SPI NRF24L01+中断信号	 GPIOB_PIN_13   IRQ		上拉输入模式*/



//===========================================================================================//
void EXIT_RCC_ABP2PeriphReadtempyCmd()
{
	RCC_APB2PeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
		 //打开GPIOA打开AFIO 复用功能外设时钟复用功能为外部
}
//EXTI配置外部中断
void EXTI_InitStructReadtempCmd()
{
    EXTI_InitTypeDef EXTI_InitStruct;

// 	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource13 )          ;  //配置复用GPIOB_13 引脚做为外设线路
	EXTI_ClearITPendingBit(EXTI_Line13 )                                  ;	 //清除EXTI_Line8 中断挂起位
	EXTI_InitStruct.EXTI_Line = EXTI_Line13                               ;	 //选择中断线路
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt                       ;	 //配置EXTI为中断请求线路
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling                   ;	 //配置输入线路x升沿为中断请求
	EXTI_InitStruct.EXTI_LineCmd = ENABLE                                 ;  //外部中断使能
	EXTI_Init(&EXTI_InitStruct)                                           ;	 //初始化EXTI寄存器
}

//===========================================================================================//
//配置相应中断（嵌套向量控制器 NVIC)
void EXIT_NVIC_InitStructReadtempCmd()
{
	NVIC_InitTypeDef NVIC_InitStruct                                       ;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup)                           ;    //配置EXTI中断组
	NVIC_InitStruct.NVIC_IRQChannel = EXTI15_10_IRQn                       ;    //配置中断通道8
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = Preemption_NRF     ;	//先占优先级设置为0
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = SubPri_NRF                ;	//从中断优先级设置为0
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE                            ;	//使能中断
	NVIC_Init(&NVIC_InitStruct)                                            ;	//初始化嵌套向量控制器NVIC寄存器
}									   

void EXIT_Init()
{
	EXIT_RCC_ABP2PeriphReadtempyCmd()                                       ;
	EXTI_InitStructReadtempCmd()                                            ;
	EXIT_NVIC_InitStructReadtempCmd()                                       ;
}
/////////

static void Initial_SPI(SPI_TypeDef* SPIx)  //初始化IO端口
{
    GPIO_InitTypeDef  GPIO_InitStructure                                    ;
    SPI_InitTypeDef   SPI_InitStructure                                     ;
	if(SPIx == SPI1)                                                        {
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE)                  ;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE)                 ;
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | 
                                      GPIO_Pin_6 | 
                                      GPIO_Pin_7                            ;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF                         ;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz                    ;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP                       ;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP                        ;
        GPIO_Init(GPIOA, &GPIO_InitStructure)                               ;
        GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1)              ;
        GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1)              ; 
        GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1)              ;         
	                                                                        }
	else if(SPIx == SPI2)                                                   {
		RCC_APB2PeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE)                 ;
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE)                 ;
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | 
                                      GPIO_Pin_14 | 
                                      GPIO_Pin_15                           ;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF                         ;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz                    ;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP                       ;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP                        ;
        GPIO_Init(GPIOB, &GPIO_InitStructure)                               ;
        GPIO_PinAFConfig(GPIOA, GPIO_PinSource13, GPIO_AF_SPI2)             ;
        GPIO_PinAFConfig(GPIOA, GPIO_PinSource14, GPIO_AF_SPI2)             ; 
        GPIO_PinAFConfig(GPIOA, GPIO_PinSource15, GPIO_AF_SPI2)             ;         
	                                                                        }        
	    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8   ;
	    SPI_InitStructure.SPI_Direction= SPI_Direction_2Lines_FullDuplex    ;
	    SPI_InitStructure.SPI_Mode = SPI_Mode_Master                        ;
	    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b                    ;
	    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low                           ;
	    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge                         ;
	    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft                            ;
	    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB                   ;
	    SPI_InitStructure.SPI_CRCPolynomial = 7                             ;
	    SPI_Init(SPIx, &SPI_InitStructure)                                  ;
	    SPI_Cmd(SPIx, ENABLE)                                               ;
}

static void SPI_Send_byte(SPI_TypeDef* SPIx, uint8_t data)
{
	while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET)           ;
	SPI_I2S_SendData(SPIx, data)                                            ;

	while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET)          ;
	SPI_I2S_ReceiveData(SPIx)                                               ;
}

static uint8_t SPI_Receive_byte(SPI_TypeDef* SPIx, uint8_t data)
{
	while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET)           ;    //检查指定的SPI标志位设置与否
	SPI_I2S_SendData(SPIx, data)                                            ;    //通过外设SPIx发送一个数据，为什么要发送数据data？？而且data是要接收的数据的寄存器的地址

	while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET)          ;    //检查指定的SPI标志位设置与否
	return SPI_I2S_ReceiveData(SPIx)                                        ;    //返回通过SPIx最近接收的数据
}


/****向寄存器reg写一个字节，同时返回状态字节**************/
uint8_t SPI_RW_Reg(uint8_t reg, uint8_t value)
{
	uint8_t status                                                           ;
	CSN_L                                                                    ;    //片选低电平使能，为低时，数据可以不断写入
	status = SPI_Receive_byte(NRF_SPI, reg)                                  ;    //select register  and write value to it
	SPI_Send_byte(NRF_SPI, value)                                            ;   
	CSN_H                                                                    ;
	return(status)                                                           ; 
}
/****向寄存器reg读一个字节，同时返回状态字节**************/
uint8_t SPI_Read_Reg(uint8_t reg)
{
	uint8_t status                                                           ;
	CSN_L                                                                    ;
	SPI_Send_byte(NRF_SPI, reg)                                              ;
	status = SPI_Receive_byte(NRF_SPI, 0)                                    ;   //select register  and write value to it
	CSN_H                                                                    ;
	return(status)                                                           ;
}
/********读出bytes字节的数据*************************/
uint8_t SPI_Read_Buf(uint8_t reg,uint8_t *pBuf, uint8_t bytes)
{
	uint8_t status, byte_ctr                                                 ;
	CSN_L                                                                    ;
	status = SPI_Receive_byte(NRF_SPI, reg)                                  ;       
	for(byte_ctr = 0; byte_ctr < bytes; byte_ctr++)                          {
		pBuf[byte_ctr] = SPI_Receive_byte(NRF_SPI, 0)                        ;
                                                                             }
	CSN_H                                                                    ;
	return(status)                                                           ;
}

/****************写入bytes字节的数据*******************/
uint8_t SPI_Write_Buf(uint8_t reg,uint8_t *pBuf, uint8_t bytes)
{
	uint8_t status, byte_ctr                                                 ;
	CSN_L                                                                    ;
	status = SPI_Receive_byte(NRF_SPI, reg)                                  ; 
	for(byte_ctr = 0; byte_ctr < bytes; byte_ctr++)                          {
		SPI_Send_byte(NRF_SPI, *pBuf++)                                      ;
                                                                             }
	CSN_H                                                                    ;
	return(status)                                                           ;
}

/*接收函数，返回1表示有数据收到，否则没有数据接收到**/
uint8_t nRF24L01_RxPacket(uint8_t* rx_buf)
{
    uint8_t status,revale = 0                                                ;
	CE_L                                                                     ;
	status = SPI_Receive_byte(NRF_SPI, STATUS)                               ;	 // 读取状态寄存其来判断数据接收状况
//	CE_L;
//	status=0x40;
//	printf("STATUS接受状态：0x%2x\r\n",status);
	if(status & RX_DR)                                                       {   // 判断是否接收到数据	
//		CE_H;
		SPI_Read_Buf(RD_RX_PLOAD, rx_buf, TX_PLOAD_WIDTH)                    ;   // read receive payload from RX_FIFO buffer
//		CE_L;
		revale = 1                                                           ;	 //读取数据完成标志
	                                                                         }
	SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, status)                          ;   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
	CE_H                                                                     ;
	return revale                                                            ;	
}

 /****************发送函数***************************/
void nRF24L01_TxPacket(unsigned char * tx_buf)
{
	CE_L                                                                     ;		//StandBy I模式	
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH) ;      // 装载接收端地址
	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH)                       ; 		// 装载数据	
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e)                            ;   	// IRQ收发完成中断响应，16位CRC，主发送
	CE_H                                                                     ;		//置高CE，激发数据发送
}

void RX_Mode(void)
{
    CE_L                                                                     ;
  	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH) ;  // 接收设备接收通道0使用和发送设备相同的发送地址
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, TX_PLOAD_WIDTH)                ;  // 接收通道0选择和发送通道相同有效数据宽度 
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f)                             ;  // 使能接收通道0自动应答
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f)                         ;  // 使能接收通道0
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, 40)                               ;  // 选择射频通道0x40
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07)                          ;  // 数据传输率2Mbps，发射功率0dBm，低噪声放大器增益
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0f)                            ;  // CRC使能，16位CRC校验，上电，接收模式
  	CE_H                                                                     ;
}



void nRF24L01_Initial(void)
{
	GPIO_InitTypeDef GPIO_InitStruct                                         ;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE)                       ;
	EXIT_Init()                                                              ;
    GPIO_InitStruct.GPIO_Pin = NRF_CE_Pin                                    ;
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT                                ;
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP                               ;
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP                                 ;
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz                            ;	
	GPIO_Init(NRF_CE_PType, &GPIO_InitStruct)                                ;	
	GPIO_InitStruct.GPIO_Pin = NRF_CSN_Pin                                   ; 
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT                                ;
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP                               ;
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP                                 ;
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz                            ;
	GPIO_Init(NRF_CSN_PType, &GPIO_InitStruct)                               ;	
    Initial_SPI(NRF_SPI)                                                     ;
}

// /****************** 配置函数********************************/
// void nRF24L01_Config(void)
// {
//           //initial io
// 	//CE_L;          //        CE=0 ;chip enable
// 	//CSN_H;       //CSN=1   Spi disable
// 	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e)                            ; // Set PWR_UP bit, enable CRC(2 bytes) &Prim:RX. RX_DR enabled..
// 	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f)                             ;
// 	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f)                         ; // Enable Pipe0
// //	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_AW, 0x02); // Setup address width=5 bytes
// //	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
// 	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, 40)                               ;
// 	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x0f)                          ; // TX_PWR:0dBm, Datarate:2Mbps,
// }
//  
 void TX_Mode(uint8_t * tx_buf)
{
	CE_L                                                                     ;
  	SPI_Write_Buf(WRITE_REG_NRF24L01 + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH)    ;  // 写入发送地址
  	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH) ;  // 为了应答接收设备，接收通道0地址和发送地址相同
  	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH)                       ; 	// 装载数据
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f)                             ;  // 使能接收通道0自动应答
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f)                         ;  // 使能接收通道0
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x0a)                        ;  // 自动重发延时等待250us+86us，自动重发10次
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, 40)                               ;  // 选择射频通道0x40
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07)                          ;  // 数据传输率2Mbps，发射功率0dBm，低噪声放大器增益
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, TX_PLOAD_WIDTH)                ;  // 接收通道0选择和发送通道相同有效数据宽度
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e)                            ;  // CRC使能，16位CRC校验，上电
	CE_H                                                                     ;
	delay_us(10)                                                             ;
} 

void NRF24L01_Send(uint8_t *TX_BUF)
{
    uint8_t status = 0x00                                                    ;
	TX_Mode(TX_BUF)                                                          ;
	while(IRQ)                                                               ;
	CE_L                                                                     ;
	status = SPI_Read_Reg(STATUS)                                            ;	// 读取状态寄存其来判断数据接收状况
	if(status & TX_DS)                                                       {	/*tx_ds == 0x20*/
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x20)                        ;  // 清除TX，让IRQ拉低；			
	                                                                         }
	else if(status & MAX_RT)                                                 {
	    SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x10)                        ;   // 清除TX，让IRQ拉低；			
		                                                                     }
	CE_H                                                                     ;
	delay_us(2)                                                              ;
	CE_L                                                                     ;
}


uint8_t NRF24L01_Receive(uint8_t * data)
{   
    uint8_t status = 0x01                                                    ; 
	uint16_t i = 0                                                           ; 
	Initial_SPI(NRF_SPI)                                                     ;
	RX_Mode()                                                                ;
	while(IRQ && (++i))                                                      ;
	CE_L                                                                     ;
	status = SPI_Read_Reg(STATUS)                                            ;	// 读取状态寄存其来判断数据接收状况
	if(status & 0x40)                                                        {	//接受中断标志位
		SPI_Read_Buf(RD_RX_PLOAD,data, TX_PLOAD_WIDTH)                       ;  // read receive payload from RX_FIFO buffer
	    if(data[0]=='$')                                                     {	//自定的协议，数据首位为 $ 符号时判断收到数据		
		   	SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x40)                    ;      // 清除TX，让IRQ拉低
			return 1                                                         ;
		                                                                     }
	    SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x40)                        ;      // 清除TX，让IRQ拉低
	                                                                         }  
	CE_H                                                                     ;
	return 0                                                                 ;
}

void EXTI15_10_IRQHandler(void)
{
	 EXTI_ClearITPendingBit(EXTI_Line13)                                     ;	
}










